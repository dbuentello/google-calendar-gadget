<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs
     title="eBillity Time Tracker Gadget"
     height="700"
     width="170"
     description="Time tracker"
     author="NicolÃ¡s Peralta"
     author_email="nperalta@gmail.com">
    <Require feature="google.calendar-0.5"/>
    <Require feature="dynamic-height"/>
  </ModulePrefs>
  <Content type="html">
    <![CDATA[

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootswatch/3.1.1/darkly/bootstrap.min.css">

<!-- jquery -->
<script src="//code.jquery.com/jquery-latest.min.js"></script>

<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<!-- bootstrap datepicker -->
<script src="//cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.3.0/js/bootstrap-datepicker.js"></script>

<!-- bootstrap datepicker CSS -->
<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.3.0/css/datepicker.css">

<!-- bootstrap timepicker CSS -->
<link rel="stylesheet" href="//cdn.jsdelivr.net/bootstrap.timepicker/0.2.3/css/bootstrap-timepicker.min.css">

<!-- bootstrap timepicker -->
<script src="//cdn.jsdelivr.net/bootstrap.timepicker/0.2.3/js/bootstrap-timepicker.min.js"></script>





<style>

  body{
    color: #ccc;
    font-size: 12px;
  }

  select, input {
    height: 27px;
  }
  #gadgetcell {
    width: 175px !important;
  }
  .container {
    padding: 0 !important;  
  }
  .col-md-1 {
    padding: 0 !important;  
  }
  .well {
    padding: 6px;
    margin-top: -4px !important;
  }

  .table-condensed {
    font-size: 10px !important;
  }

  .datepicker-days {
    margin-left: -5px;      
  }

  .datepicker {
    left: 0 !important;
    color: black;
    width: 150px;
    min-width: 140px;
  }

  input.datepicker,input.input-small {
    width: 140px;
  }

  #button-next {
    color: white !important;
  }

  #firms, #projects, #activities {
    height: 27px !important;
  }
  .input-small {
    color: black;
  }

  #task-description {
    color: black;
    margin-bottom: 6px;
  }

  #project-info {
    padding-bottom: 0 !important;
    margin-bottom: 0 !important;
  }

</style>
<script>

function stringToXML(str) {
  //code for IE
  if (window.ActiveXObject) { 
   var o_xml = new ActiveXObject("Microsoft.XMLDOM"); o_xml.loadXML(str);
    return o_xml;
  }
  // code for Chrome, Safari, Firefox, Opera, etc. 
  else {
    return (new DOMParser()).parseFromString(str, "text/xml");
  }
}
// Changes XML to JSON
function xmlToJson(xml) {
  
  // Create the return object
  var obj = {};

  if (xml.nodeType == 1) { // element
    // do attributes
    if (xml.attributes.length > 0) {
    obj["@attributes"] = {};
      for (var j = 0; j < xml.attributes.length; j++) {
        var attribute = xml.attributes.item(j);
        obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
      }
    }
  } else if (xml.nodeType == 3) { // text
    obj = xml.nodeValue;
  }

  // do children
  if (xml.hasChildNodes()) {
    for(var i = 0; i < xml.childNodes.length; i++) {
      var item = xml.childNodes.item(i);
      var nodeName = item.nodeName;
      if (typeof(obj[nodeName]) == "undefined") {
        obj[nodeName] = xmlToJson(item);
      } else {
        if (typeof(obj[nodeName].push) == "undefined") {
          var old = obj[nodeName];
          obj[nodeName] = [];
          obj[nodeName].push(old);
        }
        obj[nodeName].push(xmlToJson(item));
      }
    }
  }
  return obj;
};

function login(username, password, callback) { 
  var data = { UserName: username, Password: password };
  makePOSTRequest("http://qa.ebillity.com/restservice/api/mobile/validateuser", data, callback); 
}

function get_projects(session_id, user_id, callback) {
  var data = { "UserId" : user_id, "SessionId" : session_id, "LastSyncedOn" : "2014-01-01 17:15:45", "ResetSync" : false };
  var post_url = "http://qa.ebillity.com/restservice/api/mobile/SyncData";
  makePOSTRequest(post_url, data, callback);   
}

function makePOSTRequest(url, postdata, callback) {
  var params = {};
  postdata = gadgets.io.encodeValues(postdata);
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  params[gadgets.io.RequestParameters.POST_DATA]= postdata;
  gadgets.io.makeRequest(url, callback, params); 

};

var mobile_sync_data;

function render_projects(obj) {
  var mobile_sync_data = xmlToJson(stringToXML(obj.data));
  var html = '' ;
  var firms = mobile_sync_data.MobileSyncData.Firms.Firm;
  html += '<label>Firm</label>';
  html += '<select id=firms class=form-control>';
  
  firms.sort(function(a, b){
      if(a.FirmName < b.FirmName) return -1;
      if(a.FirmName > b.FirmName) return 1;
      return 0;
  })
    
  for (var i = 0; i < firms.length; i++) {
    firm_id   = firms[i].FirmId["#text"];
    firm_name = firms[i].FirmName["#text"];
    html += '<option value=' + firm_id + '>' + firm_name + '</option>';
  };

  html += '</select><br>';

  html += '<label>Customer - Project</label>';
  html += '<select id=projects class=form-control>';
  html += '</select><br>';  

  html += '<label>Activity</label>';
  html += '<select id=activities class=form-control>';
  html += '</select><br>';  

  $('#project-info').html(html);
  console.log(mobile_sync_data);
    
  // bind change 
  $('#firms').change(function(){

    var firms = mobile_sync_data.MobileSyncData.Firms.Firm;
    console.log(firms);
    var html = '';
    for (var i = 0; i < firms.length; i++) {
      firm_id   = firms[i].FirmId["#text"];
      firm_name = firms[i].FirmName["#text"];
      // look for the firm id
      if ($(this).val() == firm_id) {
        // get the project
        projects = firms[i].ClientProjects;

        // check if it's not empty (projects)
        if (projects.MobileClientProject) {
          mobile_project = projects.MobileClientProject;
          // make the project's options
          for (var j = 0 ; j < mobile_project.length; j++) {
            client_id = mobile_project[j].ClientId["#text"];
            client_name = mobile_project[j].ClientProjectName["#text"];
            html += '<option value=' + client_id + '>' + client_name + '</option>';
          };

        }

        // render
        $('#projects').html(html);

        // log projects
        console.log(projects);

        // empty html
        html = '';
        // get activity
        activities = firms[i].ActivityType;

        // check if it's not empty (activities)
        if (activities.MobileActivityType) {
          mobile_activity = activities.MobileActivityType;
          // make the project's options
          for (var k = 0 ; k < mobile_activity.length; k++) {
            activity_id = mobile_activity[k].ActivityTypeId["#text"];
            activity_name = mobile_activity[k].ActivityTypeName["#text"];
            html += '<option value=' + activity_id + '>' + activity_name + '</option>';
          };

        }

        // render
        $('#activities').html(html);

        // log projects
        console.log(activities);


      }

    };

  });

}

function compose(){
  console.log($('#task-date').val());
  console.log($('#timepicker1').val());
  console.log($('#timepicker2').val());
  var date       = $('#task-date').val().split("\/");
  var start_time = $('#timepicker1').val().split(" ");
  start_time     = start_time[0].split(":");
  var end_time   = $('#timepicker2').val().split(" ");
  end_time       = end_time[0].split(":");
  console.log('passing var definitions');

  console.log(start_time);
  console.log(start_time[0]);
  console.log(start_time[1]);

  console.log(end_time);
  console.log(end_time[0]);
  console.log(end_time[1]);
  //endTime: {year: parseInt(date[2]), month: parseInt(date[0]), date: parseInt(date[1]) },


  var eventData = {
    title: $("#projects option:selected" ).text() + ' ' + $("#activities option:selected" ).text() ,
    details: $("#task-description").val(),
    location: 'somewhere',

    startTime: {year: parseInt(date[2]), month: parseInt(date[0]), date: parseInt(date[1]), hour: start_time[0], minute: start_time[1], second:0 },

    // Within the data model, the end time is EXCLUSIVE. So the endTime MUST
    // be on the day after the start time.
    endTime: {year: parseInt(date[2]), month: parseInt(date[0]), date: parseInt(date[1]), hour: end_time[0], minute: end_time[1], second:0 },

    // Note that attendees MUST be sent in contact format.
    attendees: [
      {email: 'nperalta@gmail.com'}
    ],
    palette: 'lightest'
// For more RRULE examples, please see http://www.ietf.org/rfc/rfc2445.txt
  };

  console.log(eventData);
  google.calendar.composeEvent(eventData);
};

function today () {

  var d = new Date();

  var month = d.getMonth()+1;
  var day = d.getDate();

  var output = d.getFullYear() + '/' +
    (month<10 ? '0' : '') + month + '/' +
    (day<10 ? '0' : '') + day;

  return output;
}


</script>
</head>

<body>

<div class="container">

    <div class="well" id="project-info">
    Loading...

    </div>
    <div class="well">
      <label>Date</label>
      <input class="datepicker" data-date-format="mm/dd/yyyy" id="task-date">
      <label>Start time</label>
      <div class="input-append bootstrap-timepicker">
        <input id="timepicker1" type="text" class="input-small">
        <span class="add-on"><i class="icon-time"></i></span>
      </div>
      <label>End time</label>
      <div class="input-append bootstrap-timepicker">
        <input id="timepicker2" type="text" class="input-small">
        <span class="add-on"><i class="icon-time"></i></span>
      </div>
      <label>Description</label><br>
      <textarea rows="2" cols="24" id="task-description">
      </textarea>      
      <a href="#" class="btn btn-primary btn-default" id="button-next" onclick="compose();">Next <span class="glyphicon glyphicon-chevron-right"></span></a>
    </div>

</div>
<script>

// Force the screen to resize
// gadgets.window.adjustHeight();

// login user and render selects
login("ajsri77@gmail.com", "Sriram0304", function(obj) {          
  var json_data  = xmlToJson(stringToXML(obj.data));
  var session_id = json_data.MobileLoginResponse.SessionId["#text"];
  var user_id    = json_data.MobileLoginResponse.UserId["#text"];
  get_projects(session_id, user_id, render_projects);

});

$(function(){

  $('.datepicker').datepicker();
  $('#timepicker1').timepicker();
  $('#timepicker2').timepicker();

});

</script>    
]]></Content>
</Module>